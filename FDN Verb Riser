desc:FDN Verb Riser

// (C) 2020 S.D.Smith - All rights reserved
//
// strictly non commercial use
//
// contact: shabtronic@gmail.com
//
// A super simple slow attack FDN reverb 
// using a set of Allpass delays and a HouseHolder matrix
//
// Implementation Notes:
//
// Reaper JS has a max array memory of 8,000,000 Doubles (64mb)
// Since we have a max delay line of 0.5 secs
// That gives us (8,000,000-1000)/24000 = 333 delay lines to 
// play around with @ 48khz

// Unfortunatly with the new slider system
// you still have to mirror define the old sliders!
// otherwise their values won't serialize

slider1:500<1,500>-Time
slider2:0.6<0,1>-Feedback
slider3:0.6<0,1>-Density
slider4:0.7<0,1>-Cascade
slider5:0.414<0,10>-ModRate
slider6:0.75<0,1>-Depth
slider7:0.25<-1,1>-Stereo
slider8:4<3,32>-Smooth
slider9:10<10,2000>-Hipass
slider10:20000<200,20000>-Lopass
slider11:0.5<0,1>-Mix
slider12:0<-12,12>-Pitch
slider13:0<-12,12>-Post Shift

options:no_meter
import stronic-lib.js-inc

@serialize

@init



AllPassTimes=GetMem(128);
FDNTimes=GetMem(128);
FDNTempFactors=GetMem(128);
InitDelayLines(64,0.75);
pitchsize=8192;
SinWindow(SinWindow,pitchsize);

// Create Sliders
//0

AddSliderTime("Time",500,1,500,"Hint: Controls the maximum delay line time.");
AddSliderPercent("Feedback",0.7,0,1,"Hint: set the FDN matrix feedback - that's essentially the reverb decay time. Freeze at 100%.");
AddSliderPercent("Density",0.6,0,1,"Hint: set the Allpass filter feedback. This controls the diffusion amount and attack.");
AddSliderPercent("Cascade",0.7,0,1,"Hint: Percentage change each delay line time in the FDN and the Allpass serial array.");
AddSliderFreq("Mod rate",0.414,0,10,"Hint: Modulation rate - as the rate increases the depth will automatically decrease.");
//5
AddSliderPercent("Depth",0.5,0,1,"Hint: Modulation depth.");
AddSliderPercent("Stereo",0.7,-1,1,"Hint: Controls the stereo field effect. De-correlates left/right using different delay times.");
AddSliderInt("Smoothness",0.7,0,1,"");
AddSliderFreq("Hi pass",10,10,2000,"Hint: Hi pass frequency on final output.");
AddSliderFreq("Lo pass",14000,200,20000,"Hint: Lo pass frequency on final output.");
//10
AddSliderPercent("Mix",0.5,0,1,"Hint: Controls the Wet/Dry balance.");
AddSliderInt("Pitch",0,-12,12,"Hint: Pitchshift semitones around the Allpass array.");
AddSliderInt("Post Shift",0,-12,12,"Hint: Pitchshift semitones the final output.");
// Reset Code
memset(DelayLines,0,8000000-DelayLines);
rtime=slider1/1000*srate;
warp=slider4;
swidth=1-slider9*0.2;
stereowidth=swidth;
OutHi.BiQuadInit();
OutLo.BiQuadInit();


function HouseHolder4(idx,in,TimeArray)
(
a=DelayOut(idx+0);
b=DelayOut(idx+1);
c=DelayOut(idx+2);
d=DelayOut(idx+3);
factor=(a+b+c+d)*-0.5;
DelayIn(idx+0,in+(a+factor)*feedback,TimeArray[0]);
DelayIn(idx+1,in+(b+factor)*feedback,TimeArray[1]);
DelayIn(idx+2,in+(c+factor)*feedback,TimeArray[2]);
DelayIn(idx+3,in+(d+factor)*feedback,TimeArray[3]);
factor;
);

function CalcDelayLengths(length,warp,swidth)
(
c=0;
l2=length;
warp2=warp;
warp=warp;
while (c<12)
  (
  AllPassTimes[c]=floor(length);
  swidth<0 ?
  (
  FDNTimes[c]=floor(l2);
  FDNTimes[c+12]=floor(l2*(1--swidth*0.005));
  )
  :
  (
  FDNTimes[c]=floor(l2*(1-swidth*0.005));
  FDNTimes[c+12]=floor(l2);
  );
  AllPassTimes[c]<4? AllPassTimes[c]=4;
  FDNTimes[c]<4? FDNTimes[c]=4;
  FDNTimes[c+12]<4? FDNTimes[c+12]=4;
  length*=warp;
  l2*=warp2;
  c+=1;
  );
);


@slider


@block

rtime=slider1/1000*srate;
feedback=slider2;
dlevel=pow(max(feedback,0.75)+0.5,4);
density=slider3;
warp=slider4;
rate=slider5;
gdepth=slider6;
modrate=rate/srate*2*$pi;
modlength=srate/75+1;
moddepth=min(1.0/(2.0*rate),1)*gdepth*modlength*0.5;
swidth=slider7;
CalcDelayLengths(rtime,warp,swidth);

HiFreq=slider9;
LoFreq=slider10;

OutHi.Hipass(HiFreq,0.25);
OutLo.Lowpass(LoFreq,0.25);

mix=slider11;

pitchamount=pow(2,(slider12)/12);
pitchamountrecip=1/pitchamount;
pitchamount2=pow(2,(slider13)/12);

housesize=4;
housesizerecip=-2.0/housesize;

@gfx 772 400
TitleColour(0.7,0.7,0.7,1); // white
ValueColour(0.2,0.1,0,1); // orange



//StartGFX(772,392,26,14);    // uncomment this if u want fixed size
StartGFX(gfx_w,gfx_h,26,15);  // and comment this out e.t.c.

pushcolour(0.0,0.0,0.0,1); // Outline Colour
feedback==1 ? pushcolour(0.1,0.1,0.1,1) : pushcolour(0.15,0.0,0.3,1);  // Main panel colour

roundrectoutline(0,0,26,15,10,.25);

FontName="arial";
FontNameBold=#;
strcpy(FontNameBold,FontName);
strcat(FontNameBold," Bold");

rectcurve=cell_len/3; // rounded corner radius
pushcolour(0.5,0.5,1,1);
gfx_setfont(1,FontNameBold,cell_len);
TextOutline(1,2,"FDN Reverb Riser",8,0.13);

gfx_setfont(1,FontName,cell_len/2);

TextOutline(25,1.5,"Version 1.0.60",2+8,0.05);
TextOutline(25,2,"shabtronic@gmail.com",2+8,0.05);

gfx_setfont(1,FontName,cell_len/1.5);
popcolour();

borderlight(0.0015);   // Rectangle border brightness
rectborder=0.125; // gap around rounded rectangles

// Hint Rectangle
roundrectoutline(1,13,25,14,rectcurve/2,rectborder);

roundrectoutline(1,2,5,13,rectcurve,rectborder);
MediumDial(3,5,0);      // time
MediumDial(3,10,3);     // Cascade

colorinc(-0.025);
roundrectoutline(5,2,9,13,rectcurve,rectborder);
MediumDial(7,5,11); //Pitch
MediumDial(7,10,12); //Post Pitch

colorinc(+0.025);
roundrectoutline(9,2,13,13,rectcurve,rectborder);
MediumDial(11,5,1);   // Feedback
MediumDial(11,10,2);  // Cascade

colorinc(-0.025);
roundrectoutline(13,2,17,13,rectcurve,rectborder);
MediumDial(15,5,4);   // rate
MediumDial(15,10,5);  // depth

colorinc(+0.025);
roundrectoutline(17,2,21,13,rectcurve,rectborder);
MediumDial(19,5,8);   // Hi
MediumDial(19,10,9);  // Lo


colorinc(-0.025);
roundrectoutline(21,2,25,13,rectcurve,rectborder);
MediumDial(23,5,10);  // mix
MediumDial(23,10,6);  // stereo


gfx_setfont(1,FontName,cell_len/2);
rgba(0.75,0.95,0.7,1); // Hover hint colour

hoverhint>-1 && mouseidx<0 ? Text(1.5,13.18,hoverhint,0);
mouseidx>-1 ? Text(1.5,13.18,mouseidx+256,0);

// Cheesy fun for the coder!
feedback==1 ? 
  (
  flash+=1; 
  flash&8==8? 
    (
    gfx_setfont(1,FontNameBold,cell_len*4);
    rgba(0.15,0.15,0.7,1);  //Frozen colour
    TextOutline(13,7,"Frozen!",1+4,.25);
    );
  );




EndGFX();

// blur for a Murky UI!
gfx_x=0;
gfx_y=0;
gfx_blurto(gfx_w,gfx_h);

@sample

// Need to sort out stereo->mono mix
outl=spl0;
outr=spl1;

feedback==1? outl=0; // freeze verb!

outl=outl+(oldout*feedback*0.9);

// Chorus style modulation - which sucks at the moment
DelayIn(0,outl,modlength);
outl=DelayOutMod(0,modlength,modrate,moddepth);

// Allpass Riser array
outl=AllPassDelay(1,outl,AllPassTimes[0],density);
outl=AllPassDelay(2,outl,AllPassTimes[1],density);
outl=AllPassDelay(3,outl,AllPassTimes[2],density);
outl=AllPassDelay(4,outl,AllPassTimes[3],density);
outl=AllPassDelay(5,outl,AllPassTimes[4],density);
outl=AllPassDelay(6,outl,AllPassTimes[5],density);
outl=AllPassDelay(7,outl,AllPassTimes[6],density);
outl=AllPassDelay(8,outl,AllPassTimes[7],density);

// Filters
outl=OutLo.BiquadProcess(outl);
outl=OutHi.BiquadProcess(outl);

// Hans Shimmer!  slighly less ropey than before!
oldout=PitchShiftSynced(20,(outl),pitchamount,pitchsize);

feedback==1? outl=0; // freeze verb!

// Freeze level
//feedback==1? outl/=2;

// Stereo FDN Reverb block
outr=HouseHolder4(9,outl,FDNTimes);
outl=HouseHolder4(13,outl,FDNTimes+12);

// Twilight princess shifting!
outr=PitchShiftFreeRunning(21,(outr),pitchamount2,pitchsize);
outl=PitchShiftFreeRunning(22,(outl),pitchamount2,pitchsize);
  
spl0=spl0*(1-mix)+outl/dlevel*mix;
spl1=spl1*(1-mix)+outr/dlevel*mix;

