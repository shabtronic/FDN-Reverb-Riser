desc:FDN Verb Riser

// (C) 2020 S.D.Smith - All rights reserved
//
// strictly non commercial use
//
// contact: shabtronic@gmail.com
//
// A super simple slow attack FDN reverb 
// using a set of Allpass delays and a HouseHolder matrix
//
// Implementation Notes:
//
// Reaper JS has a max array memory of 8,000,000 Doubles (64mb)
// Since we have a max delay line of 0.5 secs
// That gives us (8,000,000-1000)/24000 = 333 delay lines to 
// play around with @ 48khz

options:no_meter
import stronic-lib.js-inc

@init

AllPassTimes=GetMem(128);
FDNTimes=GetMem(128);
FDNTempFactors=GetMem(128);
InitDelayLines(128,0.5);  


// Create Sliders
//0
AddSliderTime("Time",500,40,500,"Controls the delay time");
AddSliderPercent("Feedback",0.7,0,1,"set the FDN matrix feedback - that's essential the reverb decay");
AddSliderPercent("Density",0.7,-1,1,"");
AddSliderPercent("Warp",0.7,0,1,"");
AddSliderFreq("Mod rate",1.414,0,10,"");
//5
AddSliderPercent("Depth",0.75,0,1,"");
AddSliderPercent("Width",0.25,-1,1,"");
AddSliderInt("Smoothness",0.7,0,1,"");
AddSliderFreq("Hi pass",10,10,2000,"");

AddSliderFreq("Lo pass",20000,200,20000,"");
//10
AddSliderPercent("Mix",0.5,0,1,"");

// Reset Code
memset(DelayLines,0,8000000-DelayLines);
rtime=slider1/1000*srate;
warp=slider4;
swidth=1-slider9*0.2;
xrtime=rtime;
xwarp=warp ;
stereowidth=swidth;
BiHiLeft.BiQuadInit();
BiHiRight.BiQuadInit();
BiLoLeft.BiQuadInit();
BiLoRight.BiQuadInit();


// sizes 1,2,3 arnt really valid HouseHolder matrices 
// Lose a little performance doing it with a loop
// in JS - keeps the code smaller
function HouseHolderX(hsize,idx,in,TimeArray,recip)
(
cc=0;
factor=0;
while (cc<hsize)
 (
 FDNTempFactors[cc]=DelayOut(idx+cc);
 factor+=FDNTempFactors[cc];
 cc+=1;
 );
factor*=recip;
cc=0;
while (cc<hsize)
  (
  DelayIn(idx+cc,in+(FDNTempFactors[cc]+factor)*density,TimeArray[cc]);
  cc+=1;
  );
factor;
);



function CalcDelayLengths(length,warp,swidth)
(
c=0;
l2=length;
warp2=1-warp;
while (c<12)
  (
  AllPassTimes[c]=floor(length);
  swidth<0 ?
  (
  FDNTimes[c]=floor(l2);
  FDNTimes[c+12]=floor(l2*(1--swidth*0.02));
  )
  :
  (
  FDNTimes[c]=floor(l2*(1-swidth*0.02));
  FDNTimes[c+12]=floor(l2);
  );
  AllPassTimes[c]<1? AllPassTimes[c]=1;
  FDNTimes[c]<1? FDNTimes[c]=1;
  FDNTimes[c+12]<1? FDNTimes[c+12]=1;
  length*=warp;
  l2*=warp2;
  c+=1;
  );
);


@block

rtime=slider1/1000*srate;
density=slider2;
dlevel=pow(max(density,0.75)+0.5,4);
apdensity=slider3;
warp=slider4;
rate=slider5;
gdepth=slider6;
modrate=rate/srate*2*$pi;
modlength=srate/250+1;
moddepth=min(1.0/(2.0*rate),1)*gdepth*modlength*0.5;
swidth=slider7;
CalcDelayLengths(rtime,warp,swidth);
housesize=4;//slider8;
HiFreq=slider9;
LoFreq=slider10;

BiHiLeft.Hipass(HiFreq,0.25);
BiHiRight.Hipass(HiFreq,0.25);
BiLoLeft.Lowpass(LoFreq,0.25);
BiLoRight.Lowpass(LoFreq,0.25);

mix=slider11;

housesizerecip=-2.0/housesize;
@gfx 772 392
TitleColour(1,1,1,1); // white
ValueColour(1,0.75,0,1); // orange
// Background Colour
rgba(0.15,0.05,0.3,1); // purple
colorinc(-0.2);
gfx_rect(0,0,gfx_w,gfx_h);
//StartGFX(772,392,29,14);    // uncomment this if u want fixed size
StartGFX(gfx_w,gfx_h,29,14);  // e.t.c.




rectcurve=cell_len/2;
pushcolour(1,1,1,1);
gfx_setfont(1,"Arial bold",cell_len);
Text(1,2,"FDN Reverb Riser",8);

gfx_setfont(1,"Arial",cell_len/2);
colorinc(-0.5);
Text(28,1.5,"Version 1.0.49",2+8);
Text(28,2,"Shabtronic@gmail.com",2+8);

gfx_setfont(1,"Arial",cell_len/1.5);
Text(1,13,"Hint: ",0);
popcolour();
gfx_setfont(1,"Arial",cell_len/1.5);

rgba(0.15,0.05,0.3,1);
roundrect(1,2,5,13,rectcurve);
MediumDial(3,5,10); // mix
MediumDial(3,10,6);  // width
rectborder(4);
borderlight(0.25);

colorinc(-0.025);
roundrect(5,2,16,13,rectcurve);
BigDial(8,6,0); // time
BigDial(13,6,3); //warp

colorinc(-0.025);
roundrect(16,2,20,13,rectcurve);
MediumDial(18,5,1); // Feedback
MediumDial(18,10,2);  // Density

colorinc(-0.025);
roundrect(16+4,2,20+4,13,rectcurve);
MediumDial(18+4,5,4); // rate
MediumDial(18+4,10,5);  // depth

colorinc(-0.025);
roundrect(16+8,2,20+8,13,rectcurve);
MediumDial(18+8,5,8); // Hi
MediumDial(18+8,10,9);  // Lo
EndGFX();

@sample

// Need to sort out stereo->mono mix
outl=spl0;
outr=spl1;

x=0;
md=1;

while (x<8)
  (
  // Chorus style modulation  
  DelayIn(x*2,outl,modlength);
  outl=DelayOutMod(x*2,modlength,modrate/md,moddepth*md);
  md*=0.9;
  // Allpass Riser
  outl=AllPassDelay(x*2+1,outl,AllPassTimes[x],apdensity);
  x+=1;
  );


outr=HouseHolderX(housesize,x*2,outl,FDNTimes,housesizerecip);
outl=HouseHolderX(housesize,x*2+4,outl,FDNTimes+12,housesizerecip);

outl=BiLoLeft.BiquadProcess(outl);
outr=BiLoRight.BiquadProcess(outr);
outl=BiHiLeft.BiquadProcess(outl);
outr=BiHiRight.BiquadProcess(outr);

spl0=spl0*(1-mix)+outl/dlevel*mix;
spl1=spl1*(1-mix)+outr/dlevel*mix;

